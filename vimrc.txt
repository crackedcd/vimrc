" settings
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,cp936,gb2312,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
language messages zh_CN.utf-8
set nocompatible
set hls
set completeopt=longest,menu
set expandtab
set tabstop=4 
set shiftwidth=4 
set nolist
set nu
set cindent shiftwidth=4
set incsearch
set hlsearch
set backspace=eol,start,indent
set ambiwidth=double
set formatoptions=tcrqnmM
"set guifont=YaHei\ Consolas\ Hybrid:h10
set guifont=Consolas:h10
set laststatus=2
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%b]\ [HEX=\%B]\ [COL=\%c:%{col(\"$\")-1}]\ [LINE=%l:%L]\ [LEN=%p%%]
set foldmethod=indent 
set foldlevel=100
set ofu=syntaxcomplete#Complete
let mapleader=","
vnoremap <Leader>y "+y
nmap <Leader>p "+p
set gcr=a:block-blinkon0
"set guioptions-=m
set guioptions-=T
set ruler
set cursorline
set cursorcolumn
" define file type
au BufRead,BufNewFile *.{md,mdown,mkd,mkdn,markdown,mdwn} set filetype=mkd


"" vundle
" vundle start
set nocompatible               " be iMproved
filetype off                   " required!
set rtp+=$VIMRUNTIME/bundle/vundle/
call vundle#begin('$VIMRUNTIME/bundle')
Bundle 'VundleVim/Vundle.vim'

" vundle vim-scripts
Bundle 'L9'
Bundle 'bufexplorer.zip'
"Bundle 'taglist.vim'
Bundle 'The-NERD-tree'
Bundle 'The-NERD-Commenter'
Bundle 'python.vim'
Bundle 'Pydiction'
Bundle 'awk.vim'

" vundle git-repos
Bundle 'gmarik/vundle'
Bundle 'tomasr/molokai'
Bundle 'Shougo/neocomplete.vim'
Bundle 'luochen1990/rainbow'
Bundle 'Yggdroot/indentLine'
Bundle 'Raimondi/delimitMate'
Bundle 'Lokaltog/vim-powerline'
Bundle 'scrooloose/nerdcommenter'
Bundle 'godlygeek/tabular'
Bundle 'plasticboy/vim-markdown'
Bundle 'davidhalter/jedi-vim'
Bundle 'majutsushi/tagbar'
Bundle 'hdima/python-syntax'
Bundle 'hynek/vim-python-pep8-indent'
Bundle 'tpope/vim-repeat'
Bundle 'pangloss/vim-javascript'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'othree/javascript-libraries-syntax.vim'


" vundle end
call vundle#end()
filetype plugin indent on


"" plugins

" python-mode
"let g:pymode = 1
"let g:pymode_python = 'python3'
"let g:pymode_indent = 1
"let g:pymode_folding = 1
"let g:pymode_doc = 1
"let g:pymode_doc_bind = 'K'
"let g:pymode_run = 0
"let g:pymode_breakpoint_bind = '<leader>b'
"let g:pymode_lint_on_write = 1

"" solarized
"syntax enable
"syntax on
"colorscheme solarized
"set background=light
"set background=dark
"set t_Co=256

" molokai
syntax enable
syntax on
colorscheme molokai
let g:molokai_italic = 0
let g:molokai_original = 1
set t_Co=256

" Taglist
"let Tlist_Show_One_File = 1
"let Tlist_Exit_OnlyWindow = 1
"let Tlist_Sort_Type = 'name'
"let Tlist_Auto_Open = 0
"let g:winManagerWindowLayout = 'FileExplorer|TagList'

" Tlisttoggle
"nnoremap <silent> <F8> :TlistToggle<CR>
nmap <silent> <F8> :TagbarToggle<CR>
let g:ctags_bin = 'ctags'
let g:tagbar_ctags_bin = g:ctags_bin
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_width = 30
let g:tagbar_left = 1
let g:tagbar_compact = 1
let g:tagbar_type_python = {
    \ 'kinds' : [
        \ 'c:classes',
        \ 'f:functions',
        \ 'm:class members',
        \ 'v:variables:1',
        \ 'i:imports:1'
    \ ]
\ }

" python run
au BufRead *.py map <buffer> <F5> :w<CR>:!python % <CR>

" bufexporer
map <F3> :BufExplorer<CR>

" rainbow parentheses
let g:rainbow_active = 1
" 'guifgs': GUI界面的括号颜色(将按顺序循环使用)
" 'ctermfgs': 终端下的括号颜色(同上,插件将根据环境进行选择)
" 'operators': 描述你希望哪些运算符跟着与它同级的括号一起高亮
let g:rainbow_conf = {
    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \   'operators': '_,_',
    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately': {
    \       '*': {},
    \       'vim': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \       },
    \       'html': {
    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \       },
    \       'css': 0,
    \   }
    \ }

" indentLine
let g:indentLine_color_gui = '#444444'
let g:indentLine_color_tty_light = 7  " (default: 4)
let g:indentLine_color_dark = 1  " (default: 2)
let g:indentLine_char = '|'
let g:indentLine_enabled = 1

" pyindent
let g:python_highlight_all = 1
let g:pyindent_open_paren = "&sw"
let g:pyindent_nested_paren = "&sw"
let g:pyindent_continue = "&sw"

" neocomplete
let g:neocomplete#enable_auto_select = 0
let g:acp_enableAtStartup = 0 
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 9
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=python3complete#Complete
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\)\w*'

" NERDTree
map <F2> :NERDTreeToggle<CR>
let NERDTreeChDirMode = 2
let NERDTreeWinSize = 30
inoremap <C-C> <Esc>

" delimitmate
au FileType python let b:delimitMate_nesting_quotes = ['"']

" powerline
let g:Powerline_colorscheme='solarized256'

" pydiction
let g:pydiction_location = '$VIMRUNTIME/bundle/pydiction/complete-dict'
let g:pydiction_menu_height = 9

" vim-markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1

" jedi-vim
let g:jedi#popup_select_first = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#squelch_py_warning = 1

" vim-javascript
let g:javascript_enable_domhtmlcss = 1
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 0
autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 0
autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 0


"" scripts
set diffexpr=MyDiff()
function MyDiff()
   let opt = '-a --binary '
   if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
   if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
   let arg1 = v:fname_in
   if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
   let arg2 = v:fname_new
   if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
   let arg3 = v:fname_out
   if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
   if $VIMRUNTIME =~ ' '
     if &sh =~ '\<cmd'
       if empty(&shellxquote)
         let l:shxq_sav = ''
         set shellxquote&
       endif
       let cmd = '"' . $VIMRUNTIME . '\diff"'
     else
       let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
     endif
   else
     let cmd = $VIMRUNTIME . '\diff'
   endif
   silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
   if exists('l:shxq_sav')
     let &shellxquote=l:shxq_sav
   endif
 endfunction

" python head
" python3已经用不上了
"map <silent> <leader><F3> :call PythonHead()<cr>'s
"function PythonHead()
    "call append(0,"#!/usr/bin/env python")
    "call append(1,"# coding: utf-8")
    "call append(2,"") 
    "echohl WarningMsg | echo 'Python file head added.' | echohl None
"endf


" 进行版权声明的设置
" 添加或更新头
map <silent> <leader><F3> :call TitleDet()<cr>'s
function AddTitle()
    let version_line = -1
    let version_line = version_line + 1 | call append(version_line,"'''")
    let version_line = version_line + 1 | call append(version_line,"    Author: yuchao@360.cn")
    let version_line = version_line + 1 | call append(version_line,"")
    let version_line = version_line + 1 | call append(version_line,"    Last modified: ".strftime("%Y-%m-%d %H:%M"))
    let version_line = version_line + 1 | call append(version_line,"")
    let version_line = version_line + 1 | call append(version_line,"    Filename: ".expand("%:t"))
    let version_line = version_line + 1 | call append(version_line,"")
    let version_line = version_line + 1 | call append(version_line,"    Description: ")
    let version_line = version_line + 1 | call append(version_line,"")
    let version_line = version_line + 1 | call append(version_line,"'''")
    let version_line = version_line + 1 | call append(version_line,"")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endf

" 更新最近修改时间和文件名
function UpdateTitle()
    normal m'
    execute '/s*Last modified:/s@:.*$@\=strftime(": %Y-%m-%d %H:%M")@'
    normal ''
    normal mk
    execute '/s*Filename:/s@:.*$@\=": ".expand("%:t")@'
    execute "noh"
    normal 'k
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

" 判断前10行代码里面，是否有Last modified这个单词，
" 如果没有的话，代表没有添加过作者信息，需要新添加；
" 如果有的话，那么只需要更新即可
function TitleDet()
    let n=1
    "默认为添加
    while n < 20
        let line = getline(n)
"        if line =~ '^\s\#\s*\S*Last\smodified:\S*.*$'
        if line =~ '^\s*Last\smodified:\S*.*$'
            call UpdateTitle()
            return
        endif
        let n = n + 1
    endwhile
    call AddTitle()
endfunction

